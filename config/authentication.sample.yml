# Configure authentication by saving this file as authentication.yml One section
# for each RAILS_ENV, like database.yml
#
# If you just want straight database backed authentication you don't need this
# file at all.
#
development:
  # Disable database authentication altogether
  #disable_default: true

  # additional methods, an array of hashes
  #methods:
    # An adapter is a class that implements an authentication mechanism. You
    # can roll your own, or use one of Gitorious' prepackaged ones.
    # Available implementations are:
    # Gitorious::Authentication::LDAPAuthentication
    # Gitorious::Authentication::Crowd

    ############################################################################
    # Example of configuring LDAP authentication
    #- adapter: Gitorious::Authentication::LDAPAuthentication

      # IP/hostname to LDAP server
      #host: ldap.example

      # Override the default port (389)
      #port: 1999

      # The base DN to search
      #base_dn: DC=gitorious,DC=org

      # The base DN when searching for groups (for authorization)
      # If unspecified, base_dn is used
      # group_search_dn: OU=groups,dc=gitorious,dc=org

      # What LDAP attribute to use for user authentication. Default is CN
      #login_attribute: uid

      # How to build a user's DN. Default: $LOGIN_ATTRIBUTE={},$BASE_DN,
      # e.g. CN=chris,DC=gitorious,DC=org
      #distinguished_name_template: "{}@gitorious.org"

      # Map LDAP fields to database fields.
      # Default: displayname => fullname, mail => email
      # attribute_mapping:
        # givenName: fullname
        # publicEmail: email

      # See Net-LDAP for other options, or use "none" for no encryption.
      # Defaults to "simple_tls" if not set.
      #encryption: simple_tls

      # A class/object that will be called after successful authentication
      # through LDAP. Will be "constantized", post_authenticate will be called
      # with an options hash. See LdapAuthenticationTest.
      #callback_class: SampleCallback

      # Specify a username/password to use for authenticated bind
      # NOTE: This is required when using LDAP for authorization
      #bind_user:
      #  username: boss
      #  password: sikret

      # When using LDAP authorization: which attribute in a user
      # record specifies groups a user is member of
      # This will depend on your schema/LDAP server implementation
      # but in 9/10 cases, it will be memberof
      #membership_attribute_name: memberof

      # When using LDAP authorization: which attribute in a group
      # record specifies users that are member of the group
      # This will depend on your  LDAP schema, but will usually be 
      # member or uniquemember
      #members_attribute_name: member

      # Whether the domain should be stripped, if an email address is
      # used as login name. Default is false.
      #login_strip_domain: false

      # Character used to replace forbidden characters in login names.
      # Set to '' to strip forbidden characters. Default is '-'.
      #login_replace_char: '-'

      # Adds the given domain (if any) to the email address given in the LDAP
      # attribute. If it already contains a domain it is replaced. Default is nil.
      #email_domain:

    # End LDAP configuration example
    ############################################################################

    ############################################################################
    # Example of configuring Atlassian Crowd authentication
    #- adapter: Gitorious::Authentication::CrowdAuthentication

      # IP/hostname to Crowd server
      #host: crowd.example

      # Override default port (8095)
      #port: 80

      # Set context path for Crowd installation
      #context: /crowd

      # The application name
      #application: gitorious

      # Application password
      #password: 123456789

    # End Crowd configuration example
    ############################################################################
    
    ############################################################################
    # Example of configuring HTTP authentication
    #- adapter: Gitorious::Authentication::HTTPAuthentication
      # What server variable to use as login name. Default is REMOTE_USER.
      #login_variable: REMOTE_USER

      # Map server variables to database fields. Default is empty.
      #variable_mapping:

      # Whether the domain should be stripped, if an email address is
      # used as login name. Default is false.
      #login_strip_domain: false

      # Character used to replace forbidden characters in login names.
      # Set to '' to strip forbidden characters. Default is '-'.
      #login_replace_char: '-'

      # Adds the given domain (if any) to the email address given in the server
      # variable. If it already contains a domain it is replaced. Default is nil.
      #email_domain:

      # All options are optional. Without any further configuration, every web
      # server based authentication method (Basic Auth, Kerberos, SSL, etc.)
      # should work out of the box, as long as the web server sets the
      # REMOTE_USER variable. However in order to enable auto-registration you
      # have to configure at least a server variable providing the email address.

      # Example for email addresses given in REMOTE_USER:
      #login_strip_domain: true
      #variable_mapping:
        #REMOTE_USER: email

      # Example for email address and full name given in SSL client certificate:
      #login_variable: SSL_CLIENT_S_DN_Email
      #login_strip_domain: true
      #variable_mapping:
        #SSL_CLIENT_S_DN_Email: email
        #SSL_CLIENT_S_DN_CN: fullname

      # Example for cases where REMOTE_USER contains the username which is also
      # the email alias or where REMOTE_USER is in the format <username>@<domain>,
      # and the given domain isn't the email domain but e.g. a Kerberos realm:
      #login_strip_domain: true
      #email_domain: example.com
      #variable_mapping:
        #REMOTE_USER: email

    # End HTTP configuration example
    ############################################################################

# production:
